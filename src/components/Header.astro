---
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
    {
        title: "Experience",
        label: "experience",
        url: "/#experience",
    },
    {
        title: "Projects",
        label: "projects",
        url: "/#projects",
    },
    {
        title: "About me",
        label: "about-me",
        url: "/#about-me",
    },
];
---

<header
    class="fixed top-0 left-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
    <nav
        class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
    >
        {
            navItems.map((link) => (
                <a
                    class="relative block px-2 py-2 transition hover:text-lime-500 font-medium"
                    aria-label={link.label}
                    href={link.url}
                >
                    {link.title}
                </a>
            ))
        }
        <a
            href="https://www.linkedin.com/in/deyleraf/"
            aria-label="contact"
            class="relative block px-2 py-2 transition hover:text-lime-500 font-medium"
            rel="noopener noreferrer"
            target="_blank">Contact</a
        >
        <ThemeToggle />
    </nav>
</header>

<script is:inline>
    document.addEventListener("astro:page-load", () => {
        const sections = document.querySelectorAll("section");
        const navItems = document.querySelectorAll("header nav a");

        const callback = (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute("aria-label") == entry.target.id
                        ) {
                            if (
                                document.documentElement.classList.contains(
                                    "dark"
                                )
                            ) {
                                item.classList.add("text-lime-400");
                                item.classList.remove("text-lime-600");
                            } else {
                                item.classList.add("text-lime-600");
                                item.classList.remove("text-lime-400");
                            }
                        } else {
                            item.classList.remove(
                                "text-lime-600",
                                "text-lime-400"
                            );
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        });

        sections.forEach((section) => {
            observer.observe(section);
        });

        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
                observer.disconnect();
            } else {
                sections.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<style>
    nav {
        animation: nav-shadown 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @keyframes nav-shadown {
        to {
            @apply shadow-lg bg-lime-500/10 ring-2 ring-lime-500 dark:ring-lime-500 backdrop-blur;
        }
    }
</style>
